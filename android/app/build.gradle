apply plugin: "com.android.application"
apply plugin: "com.facebook.react"

react {
    reactNativeDir = file("../../node_modules/react-native/packages/react-native")
    codegenDir = file("../../node_modules/react-native/packages/react-native-codegen")
    hermesCommand = project.file("../../node_modules/react-native/packages/react-native/ReactAndroid/hermes-engine/build/hermes/bin/hermesc").toString()
}

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'

android {
    ndkVersion rootProject.ext.ndkVersion

    compileSdkVersion rootProject.ext.compileSdkVersion

    namespace "com.rn_sandbox"
    defaultConfig {
        applicationId "com.rn_sandbox"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://reactnative.dev/docs/signed-apk-android.
            signingConfig signingConfigs.debug
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
    packagingOptions {
        jniLibs {
            pickFirsts += ['lib/**/libc++_shared.so',
                           'lib/**/libfabricjni.so',
                           'lib/**/libfb.so',
                           'lib/**/libfbjni.so',
                           'lib/**/libfolly_runtime.so',
                           'lib/**/libglog.so',
                           'lib/**/libglog_init.so',
                           'lib/**/libhermes-executor-release.so',
                           'lib/**/libjscexecutor.so',
                           'lib/**/libjsi.so',
                           'lib/**/libjsijniprofiler.so',
                           'lib/**/libjsinspector.so',
                           'lib/**/liblogger.so',
                           'lib/**/libmapbufferjni.so',
                           'lib/**/libreact_codegen_rncore.so',
                           'lib/**/libreact_config.so',
                           'lib/**/libreact_debug.so',
                           'lib/**/libreact_nativemodule_core.so',
                           'lib/**/libreact_newarchdefaults.so',
                           'lib/**/libreact_render_animations.so',
                           'lib/**/libreact_render_attributedstring.so',
                           'lib/**/libreact_render_componentregistry.so',
                           'lib/**/libreact_render_core.so',
                           'lib/**/libreact_render_debug.so',
                           'lib/**/libreact_render_element.so',
                           'lib/**/libreact_render_graphics.so',
                           'lib/**/libreact_render_imagemanager.so',
                           'lib/**/libreact_render_leakchecker.so',
                           'lib/**/libreact_render_mapbuffer.so',
                           'lib/**/libreact_render_mounting.so',
                           'lib/**/libreact_render_runtimescheduler.so',
                           'lib/**/libreact_render_scheduler.so',
                           'lib/**/libreact_render_telemetry.so',
                           'lib/**/libreact_render_templateprocessor.so',
                           'lib/**/libreact_render_textlayoutmanager.so',
                           'lib/**/libreact_render_uimanager.so',
                           'lib/**/libreact_utils.so',
                           'lib/**/libreactnativeblob.so',
                           'lib/**/libreactnativejni.so',
                           'lib/**/libreactperfloggerjni.so',
                           'lib/**/librrc_image.so',
                           'lib/**/librrc_legacyviewmanagerinterop.so',
                           'lib/**/librrc_root.so',
                           'lib/**/librrc_scrollview.so',
                           'lib/**/librrc_text.so',
                           'lib/**/librrc_textinput.so',
                           'lib/**/librrc_unimplementedview.so',
                           'lib/**/librrc_view.so',
                           'lib/**/libruntimeexecutor.so',
                           'lib/**/libturbomodulejsijni.so',
                           'lib/**/libyoga.so',
                           'lib/**/libdiscord.so'
            ]
        }
    }

    flavorDimensions "architecture"
    productFlavors {
        fabricOld {
            dimension "architecture"
            applicationId = "com.rn_sandbox.fabric_old"
        }
        fabric {
            dimension "architecture"
            applicationId = "com.rn_sandbox.fabric"
        }
        paperOld {
            dimension "architecture"
            applicationId = "com.rn_sandbox.paper_old"
        }
        paper {
            dimension "architecture"
            applicationId "com.rn_sandbox.paper"
        }
    }
}

dependencies {
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")

    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}")
    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group: 'com.squareup.okhttp3', module: 'okhttp'
    }

    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}")
    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }

    constraints {
        implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.8.10") {
            because 'align all versions of kotlin transitive dependencies'
        }
    }
}

def checkFlavorAndPropsTask = tasks.register("checkFlavorAndProps") {
    doFirst {
        def newArchEnabled = project.hasProperty("newArchEnabled") ? project.newArchEnabled.toBoolean() : null
        if (newArchEnabled == null) {
            throw new GradleException("Can't find newArchEnabled property definition")
        }

        def reactNativeRootDir = project(':packages:react-native:ReactAndroid').projectDir.parent

        def reactProperties = new Properties()
        file("$reactNativeRootDir/ReactAndroid/gradle.properties").withInputStream { reactProperties.load(it) }
        def rnVersion = reactProperties.getProperty("VERSION_NAME").split("\\.")[1].toInteger()

        println("REACT_NATIVE_MINOR_VERSION ${rnVersion}")

        if (gradle.startParameter.taskNames.isEmpty()) {
            return
        }

        def startTask = gradle.startParameter.taskNames.get(0)
        def pattern = /[A-Z][a-z]*/
        def matcher = (startTask =~ pattern)
        if (!matcher.find()) {
            // Must not be running an assemble/bundle task
            return
        }

        def archFlavor = matcher.group().toLowerCase()
        if ((archFlavor == "fabric" && !newArchEnabled) || (archFlavor == "paper" && newArchEnabled)) {
            throw new GradleException("You're currently trying to build a ${archFlavor} flavor " +
                    "via task '${startTask}', but your newArchEnabled property is not the correct value. " +
                    "If you're building paper, set newArchEnabled to false. " +
                    "If you're building fabric, set newArchEnabled to true.")
        }

        if (!matcher.find()) {
            throw new GradleException("Start task is ${startTask}, but can't determine whether we should be running RN 72 or 73.")
        }

        def versionFlavor = matcher.group().toLowerCase()
        if ((versionFlavor == "new" && rnVersion == 72) || (versionFlavor == "old" && rnVersion == 73)) {
            throw new GradleException("You're currently try to build React Native version ${rnVersion} " +
                    "via task '${startTask}'. Please switch your flavor to the correct 'old' or 'new' variant.")
        }
    }
}

preBuild.dependsOn checkFlavorAndPropsTask

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
